مستند پروژه: حل‌گر CSP معادله ریاضی (Nerdle)

===========================
شرح مسئله
---------------------------
در این پروژه باید با استفاده از تمام کاراکترهای داده شده (ارقام و عملگرها)، دقیقاً یک‌بار، یک معادله ریاضی معتبر بسازید به گونه‌ای که:
- معادله از نظر نحوی و ریاضی معتبر باشد.
- تقدم عملگرها رعایت شود.
- فقط و فقط یک علامت مساوی (=) باشد.
- هیچ دو عملگر یا دو مساوی پشت هم نباشد.
- اعداد چندرقمی مجاز هستند.

===========================
کلاس SmartEquationCSP (حل‌گر پیشرفته)
---------------------------
توضیح توابع:
1. __init__(self, chars)
    - مقداردهی اولیه لیست ورودی و شمارش هر کاراکتر (برای تکرار).

2. is_valid_equation(self, eq_str)
    - بررسی اعتبار معادله‌ی نهایی از نظر نحوی و ریاضی.
    - شروط: فقط یک مساوی، دو طرف مساوی خالی نباشد، عدم شروع/پایان با عملگر یا مساوی، عدم وجود دو عملگر/مساوی پشت سر هم، تساوی دو سمت.

3. is_partial_valid(self, assignment)
    - بررسی صحت نحوی رشته در حال ساخت:
        - بیش از یک مساوی نباشد.
        - عدم شروع با عملگر یا مساوی.
        - عدم وجود دو عملگر/مساوی یا عملگر و مساوی کنار هم.
        - اگر مساوی آمده، سمت چپ آن نباید خالی باشد.

4. mrv(self, assignment, available)
    - انتخاب جایگاه بعدی بر اساس MRV (Minimum Remaining Values):
        - اولین جایگاه خالی انتخاب می‌شود.

5. lcv(self, var, assignment, available)
    - مرتب‌سازی مقدارهای مجاز بر اساس LCV (Least Constraining Value):
        - مقدارهایی که بیشترین تعداد باقیمانده دارند زودتر امتحان می‌شوند.

6. ac2(self, assignment, available)
    - کنترل Arc Consistency:
        - اگر برای متغیری هیچ مقدار مجاز نمانده باشد، مسیر قطع می‌شود.

7. forward_checking(self, available, value)
    - حذف مقدار انتخاب‌شده از دامنه بقیه (FC):
        - اگر مقدار باقی‌مانده نداشت، False.

8. backtrack(self, assignment, available, depth=0)
    - جستجوی عقب‌گرد با تمام قیدهای بالا:
        - اگر رشته کامل شد، اعتبارسنجی و ثبت جواب.
        - مقداردهی جایگاه بعدی با توجه به MRV و LCV و اجرای FC و AC2 و قید نحوی.
        - اگر جواب پیدا شد، ادامه نمی‌دهد.

9. solve(self)
    - مقداردهی اولیه و اجرای AC2، شروع جستجو با backtrack، و برگرداندن جواب نهایی.

---------------------------
کلاس SimpleEquationCSP (حل‌گر ساده)
---------------------------
توضیح توابع:
1. __init__(self, chars)
    - مقداردهی اولیه لیست ورودی و آرایه استفاده از هر کاراکتر.

2. is_valid_equation(self, eq_str)
    - بررسی اعتبار رشته معادله (یک مساوی، دو سمت پر، عدم شروع/پایان با عملگر، عدم وجود دو عملگر/مساوی پشت سر هم، تساوی دو سمت).

3. backtrack(self, path)
    - تولید جایگشت همه کاراکترها و بررسی اعتبار رشته کامل.

4. solve(self)
    - اجرای الگوریتم ساده و برگرداندن جواب.

---------------------------
ساختار فایل MAIN
---------------------------
- دریافت ورودی از کاربر (لیست کاراکترها)
- اجرای حل‌گر پیشرفته و چاپ جواب
- اجرای حل‌گر ساده و چاپ جواب

---------------------------
جمع‌بندی
---------------------------
این پروژه یک پیاده‌سازی کامل از مسئله رضایت محدودیت‌ها (CSP) برای ساخت معادله ریاضی معتبر است که با استفاده از دو حل‌گر ساده و پیشرفته، تمام مسیرهای ممکن را بررسی می‌کند و بهترین جواب را (در صورت وجود) پیدا می‌کند.


